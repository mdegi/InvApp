/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.md.invapp;


import com.dropbox.core.v2.DbxClientV2;
import com.dropbox.core.v2.files.FileMetadata;

import com.dropbox.core.DbxAuthInfo;
import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.json.JsonReader;
import de.idyl.winzipaes.AesZipFileEncrypter;
import de.idyl.winzipaes.impl.AESEncrypterBC;
//import invapp.de.idyl.crypto.zip.AesZipFileEncrypter;
import com.md.invapp.reports.DatesRepInternalFrame;
import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.WindowConstants;
import stdClasses.InvAppException;
import stdClasses.StdFun;

/**
 *
 * @author user
 */
public class InvAppMain extends javax.swing.JFrame implements DesktopInterface {

    /**
     * Creates new form InvAppMain
     */
    public InvAppMain(RuntimeArgs runTimeArgs) {
        this.RUNTIME_ARGS = runTimeArgs;
        
        initComponents();
        initLogMeIn();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        WindowListener exitListener = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                exitApp();
            }
        };
        addWindowListener(exitListener);

        
        setVisible(true);
        setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem6 = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();

        jMenuItem6.setText("jMenuItem6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(StdFun.RES_PATH + "appIcon.png")));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton2.setText("Items");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton1.setText("Sales Transaction");
        jButton1.setActionCommand("SALES_TRANSACTION");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jDesktopPane1.setBackground(new java.awt.Color(230, 227, 227));

        jMenu1.setMnemonic('M');
        jMenu1.setText("Maintenance");

        jMenuItem1.setText("Stock Categories");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Stock Group");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);

        jMenuItem9.setText("Stock Items");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);
        jMenu1.add(jSeparator2);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('P');
        jMenu2.setText("Postings");

        jMenuItem11.setText("Invoice / Cash Sale");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem5.setText("Vehicle");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('R');
        jMenu3.setText("Reports");

        jMenuItem12.setText("Vat Report");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuItem13.setText("Profit Report");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuItem14.setText("Purchase XL Report");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem14);

        jMenuItem17.setText("Sales XL Report");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem17);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Exit");

        jMenuItem15.setText("Backup");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem15);

        jMenuItem16.setText("Exit");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem16);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initLogMeIn() {
    
        final String LOGMEIN = "Hamachi2Svc";
        
        String startCommandScript[] = { "runas.exe", "/user:Administrator", "sc", "Start", LOGMEIN };
                
        Process process;
        try {
            process = new ProcessBuilder(startCommandScript).start();
            try (InputStream is = process.getInputStream()) {
                InputStreamReader isr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(isr);
                String line;
                
                while ((line = br.readLine()) != null) {
                    if (line.matches("controlservice failed")) {
                        JOptionPane.showMessageDialog(null,
                                "Starting LogMeIn Service failed",
                                StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;                                
                    }
                }
                
                br.close();
                isr.close();
            }
            process.destroy();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null,
                "IOException starting service:\n" + e.getMessage(), 
                StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;            
        }    
    }
    
    @Override
    public Dimension getDesktopDimension() {        
        return jDesktopPane1.getSize();
    }

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        addToDesktop(new ItemSalesInternalFrame(getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        addToDesktop(new DatesRepInternalFrame(getDesktopDimension(), 
            DatesRepInternalFrame.VAT_REPORT, getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
         addToDesktop(new DatesRepInternalFrame(getDesktopDimension(), 
            DatesRepInternalFrame.PROFIT_REPORT, getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
         addToDesktop(new DatesRepInternalFrame(getDesktopDimension(), 
            DatesRepInternalFrame.PURCHASE_XL_REPORT, getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                callProcessBackup(false);
            }
        });        
        thread.start();        
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
         addToDesktop(new DatesRepInternalFrame(getDesktopDimension(), 
            DatesRepInternalFrame.SALES_XL_REPORT, getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        addToDesktop(new ItemInternalFrame(getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addToDesktop(new ItemSalesInternalFrame(getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        exitApp();
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        addToDesktop(new ItemInternalFrame(getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        addToDesktop(new ItemGroupInternalFrame(getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        addToDesktop(new ItemCategoryInternalFrame(getDesktopDimension(), RUNTIME_ARGS), false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void uploadFile(String filePath, String fileName) throws IOException, InvAppException{
        
        String dropBoxPath= "/"+ fileName;
        
        DbxAuthInfo authInfo= null;
        try {
            authInfo = DbxAuthInfo.Reader.readFromFile("DB.INFO");
        }
        catch (JsonReader.FileLoadException ex) {
            throw new InvAppException("Authorisation file not found\nBackup not uploaded\n" + ex.getMessage());
        }

        //String userLocale = Locale.getDefault().toString();
        DbxRequestConfig requestConfig = new DbxRequestConfig("examples-upload-file");       
        DbxClientV2 dbxClient = new DbxClientV2(requestConfig, authInfo.getAccessToken());
        
        //try {
        //    FullAccount account = dbxClient.users().getCurrentAccount();
        //    System.out.println(account.getName().getDisplayName());            
        //} catch (DbxException ex) {            
        //}
        
        // Upload "test.txt" to Dropbox
        try (InputStream in = new FileInputStream(filePath)) {
            try {
                FileMetadata metadata = dbxClient.files().uploadBuilder(dropBoxPath)    
                    .uploadAndFinish(in);
            } catch (DbxException ex) {
                throw new InvAppException("Error uploading to DropBox\n" + ex.getMessage());
            }
        }
    }
    
    private void exitApp() {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                callProcessBackup(true);
            }
        });
        
        thread.start();
    }
    
    
    private void callProcessBackup(boolean exitWhenFinish) {
        
        try {
            if (!RUNTIME_ARGS.getUserRec().isReadOnly()) {
                processBackupCommand();   
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,
                "IOException performing backup:\n" + ex.getMessage(), 
                StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;            
        } catch (InterruptedException ex) {
            JOptionPane.showMessageDialog(null,
                "InterruptedException performing backup:\n" + ex.getMessage(), 
                StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;                        
        } catch (InvAppException ex) {
            JOptionPane.showMessageDialog(null,
                "DAException performing backup:\n" + ex.getMessage(), 
                StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;                        
        }
        finally {
            if (exitWhenFinish) {
                System.exit(0);
            }
        }
    }
    
    public synchronized void processBackupCommand() 
            throws IOException, InterruptedException, InvAppException {
         
        final Frame FRAME_OWNER = JOptionPane.getFrameForComponent(this);
        //final JDialog PROGRESS_DIALOG = new JDialog(FRAME_OWNER, "Backup", Dialog.ModalityType.MODELESS);
        final JDialog PROGRESS_DIALOG = new JDialog(FRAME_OWNER, "Backup", Dialog.ModalityType.APPLICATION_MODAL);
        
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                JProgressBar progressBar = new JProgressBar();
                progressBar.setIndeterminate(true);
                JPanel panel = new JPanel(new BorderLayout());
                panel.add(progressBar, BorderLayout.CENTER);
                panel.add(new JLabel("Processing backup . . . .\nPlease wait . . . ."), BorderLayout.PAGE_START);              
                PROGRESS_DIALOG.add(panel);
                PROGRESS_DIALOG.pack();
                PROGRESS_DIALOG.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);               
                PROGRESS_DIALOG.setLocationRelativeTo(FRAME_OWNER);
                PROGRESS_DIALOG.setSize(400,100);
                PROGRESS_DIALOG.setVisible(true); 
            }
        }) ;        
        thread.start();
        
        File jarFile = new File(InvApp.class.getProtectionDomain().getCodeSource().getLocation().getPath());
        
        String backupFolder = jarFile.getAbsolutePath().substring(0, jarFile.getAbsolutePath().length() - "InvApp.jar".length());
        backupFolder += "backups" + StdFun.osFs();
        File srcFolder = new File(backupFolder);
        
        StringBuilder rarFile = new StringBuilder("");
        rarFile.append(StdFun.getYear(StdFun.getToday()));     
        rarFile.append(StdFun.charFill(StdFun.getMonth(StdFun.getToday()), 2,"0"));
        rarFile.append("da.rar");     
        
        String backupFile = backupFolder + rarFile.toString(); 
        
        boolean backupOk = false;
                        
        DBUtils dbUtils = new DBUtils(RUNTIME_ARGS);

        int exitVal;
        exitVal = dbUtils.performBackup(InvAppDBConn.DB_USER, RUNTIME_ARGS.getInvAppDbConn().getDbPwd(), backupFolder);

        if (exitVal == 0) {
            if ((backupFile != null) && (!backupFile.equals(""))) {
                AesZipFileEncrypter destEnc;
                try {
                    destEnc = new AesZipFileEncrypter(backupFile,  new AESEncrypterBC());

                    ArrayList<File> fileList = new ArrayList<>();
                    StdFun.fillDirectoryContents(srcFolder, fileList);
                    for (Iterator<File> fileIter = fileList.iterator(); fileIter.hasNext();) {
                        
                        File nextFile = fileIter.next();
                        if (nextFile.getName().length() > 4) {
                            if (!nextFile.getName().substring(nextFile.getName().length()-4).equals(".rar")) {
                                destEnc.add(nextFile, P);   
                            } else { // rar files
                                if (!nextFile.getName().equals(rarFile.toString())) {
                                    nextFile.delete(); // remove previous month rar files if any
                                }
                            }
                        }                            
                    }

                    destEnc.close();
                    backupOk = true;
                } catch (IOException ex) {
                    throw new IOException("Error performing backup" + ex.getMessage());
                }                
                if (backupOk) {
                    uploadFile(backupFolder + rarFile.toString(), rarFile.toString());
                    
                    PROGRESS_DIALOG.dispose();

                    JOptionPane.showMessageDialog(null,
                        "Backup ready" ,
                        StdFun.SYSTEM_TITLE,JOptionPane.INFORMATION_MESSAGE) ;
                }
            } else {
                throw new InvAppException("Backup file not detected\nBackup not performed");
            }
        }
    }

    @Override
    public void addToDesktop(JInternalFrame jf, boolean maximize) {

        jDesktopPane1.add(jf);
        try {
            jf.setSelected(true);
            if (maximize) {
                jf.setMaximum(true);
            }
        } catch (java.beans.PropertyVetoException e) {
            JOptionPane.showMessageDialog(null,
                "System error addToDesktop\n" + e.getMessage(),
                StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;  
        }
    }
    
    private final RuntimeArgs RUNTIME_ARGS;

    private final String P = "invApp123";
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JInternalFrame[] getAllFrames() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void moveToFront(JInternalFrame frame) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

}
