/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.md.invapp;

import com.md.invapp.data.entities.InvAppUserEntity;
import com.md.invapp.data.HibernateUtil;
import com.md.invapp.data.dao.InvAppUserDao;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.sql.SQLException;
import java.util.Properties;
import javax.swing.JOptionPane;
import org.hibernate.Session;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import stdClasses.StdFun;

/**
 *
 * @author user
 */
public class InvApp extends javax.swing.JFrame {

    /**
     * Creates new form InvApp
     */
    public InvApp() {
        initVars();        
        initAppConfig();
        initComponents();
        setLocationRelativeTo(null);              
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/appIcon.png")));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(105, 105, 130));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBackground(new java.awt.Color(105, 105, 130));
        jPanel2.setPreferredSize(new java.awt.Dimension(312, 88));

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(253, 253, 253));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(invAppConfig.getCompanyName());
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addGap(27, 27, 27))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Password:");

        jButton1.setText("Login");
        jButton1.setSelected(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Quit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("User:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        //if (new String(jPasswordField1.getPassword()).equals(appPwd)) {  
        if ((jTextField1.getText() != null) && (!jTextField1.getText().equals(""))) {  
            InvAppDBConn iaDBConn;                        
            try {
                iaDBConn = new InvAppDBConn(dbServer, dbPort, dbPwd);
                runTimeArgs.setInvAppDbConn(iaDBConn);
                userRec = userDao.getUser(jTextField1.getText());
                
                if (userRec.getId() != InvAppUserEntity.CANCELLED_RECORD) {
                    if (new String(jPasswordField1.getPassword()).equals(userRec.getUserPass())) {  
                        dispose();
                        runTimeArgs.setUserRec(userRec);
                        InvAppMain invAppMain = new InvAppMain(runTimeArgs);                    
                    } else {
                        JOptionPane.showMessageDialog(null,
                            "Invalid password entered",
                            StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;                    
                        loginTries++;
                    }                    
                } else {
                    JOptionPane.showMessageDialog(null,
                        "Invalid user entered",
                        StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;                    
                        loginTries++;
                }
                
                if (loginTries > 2) {
                    JOptionPane.showMessageDialog(null,
                        "Invalid access\nMaximum retries reached\nExiting System",
                        StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;                    
                        System.exit(0);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                    "SQLException connecting to database\n" + e.getMessage(),
                    StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;
                System.exit(0);
                
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null,
                    "ClassNotFoundException connecting to database\n" + e.getMessage(),
                    StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;
                System.exit(0);
            } 
        } else {            
            if (loginTries < 2) {
                JOptionPane.showMessageDialog(null,
                    "Please enter a valid user",
                    StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;
                    loginTries++;
            } else {
                JOptionPane.showMessageDialog(null,
                    "Invalid user entered\nExiting system",
                    StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;
                System.exit(0);
            }            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private String getCPUid() { 
        String id = null;
        
        String[][] commands = new String[][] {
            {"CMD", "/C", "WMIC CPU GET ProcessorId"}, 
        }; 

        try {
            String[] com = commands[0];
            Process process = Runtime.getRuntime().exec(com);
            process.getOutputStream().close();
            //Closing output stream of the process
            System.out.println();
            String s;
            //Reading sucessful output of the command
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream())); 

            while ((s = reader.readLine()) != null) { 
                if (!s.trim().equals("") && (!s.trim().equals("ProcessorId"))) {
                    id = s.trim();
                }        
            }
        }
        catch (IOException e) {            
            System.exit(0);
        }
        
        return id;
    }
    
    
    private void initVars() {
        String prfle;
        sFile = "C:\\" + chkFl + "\\" + appIn + "." + chkFe;

        if (new File(sFile).exists()) {
            prfle = sFile;
        } else {
            prfle = InvApp.arg;
        }
        
        if (new File(prfle).exists()) {            
            try {
                FileReader fileReader = new FileReader(prfle);
                BufferedReader in = new BufferedReader(fileReader);

                int lineNum = 0;
                String inptLine;
                while ((inptLine = in.readLine()) != null) {
                    lineNum++;
                    String tmpStr = "";
                    if (inptLine.contains(pFix)) {
                        inptLine = inptLine.substring(inptLine.indexOf(pFix)+2, inptLine.lastIndexOf(pFix));

                        for (int x = 0; x < inptLine.length(); x++) {
                            if (x % 2 == 0) {
                                if (inptLine.substring(x, x+1).equals("^")) {
                                    tmpStr = tmpStr + " ";
                                } else {
                                    tmpStr = tmpStr + inptLine.substring(x, x+1);
                                }
                            }
                        }
                        switch (lineNum) {
                            case 1:
                                cpuID = tmpStr;
                                break;
                            case 2:
                                dbPwd = tmpStr;
                                break;
                            case 3:
                                dbServer = tmpStr;
                                break;
                            case 4:
                                dbPort = Integer.parseInt(tmpStr);
                                break;
                            case 5:
                                emlPwd = tmpStr;
                                break;
                         }
                    } 
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null,
                    "IOException initialising system setup\n" + ex.getMessage(),
                    StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;
                System.exit(0);
            }
            
            if (cpuID != null) {
                if (!cpuID.equals(getCPUid())) {
                    JOptionPane.showMessageDialog(null,
                        "Error validating system setup",
                        StdFun.SYSTEM_TITLE,JOptionPane.ERROR_MESSAGE) ;
                    System.exit(0);                    
                }
            }
        } else { // does not exist
            
        }
    }    
  
    private void initAppConfig() {
        runTimeArgs = new RuntimeArgs();
        
        URL res = getClass().getClassLoader().getResource("abc.txt");
        
        session = HibernateUtil.getSessionFactory().openSession();
        userDao = new InvAppUserDao(session);
                
        if (ctx == null) {
            ctx = new AnnotationConfigApplicationContext();
            ctx.register(AppConfig.class);
            ctx.refresh();
            invAppConfig = ctx.getBean(InvAppConfig.class);
        }
        runTimeArgs.setInvAppConfig(invAppConfig);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*        try {
            //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Seaglass".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            } 
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } */
        //</editor-fold>

        if (args.length > 0) {
            arg = args[0];
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new InvApp().setVisible(true);
        });
    }
                
    private static final String appIn = "inp";
    private static final String chkFe = "ini";
    private static final String chkFl = "windows";
    private static String sFile;
    private static final String pFix = "!#";
    
    private String cpuID, emlPwd;
    private String dbPwd, dbServer;
    private int dbPort;
    private int loginTries;
    
    private Properties props ;

    private static String arg;        

    private InvAppUserEntity userRec;
    private InvAppUserDao userDao;
    
    private Session session;
    private RuntimeArgs runTimeArgs;
    private AnnotationConfigApplicationContext ctx;    
    private InvAppConfig invAppConfig;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
