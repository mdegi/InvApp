/*
 * ItemsBasicPanel.java
 *
 * Created on August 11, 2006, 4:53 PM
 */

package com.md.invapp;

import java.awt.Color;
import java.awt.Graphics;

import javax.swing.JTextField;

import stdClasses.StdFun;



/**
 *
 * @author  nla
 */
public class ItemsBasicPanel extends InvAppMaintPanel {
   
    
    /** Creates new form ItemsBasicPanel
     * @param itemRecord */
    public ItemsBasicPanel(ItemRecord itemRecord) {
        this.itemRecord = itemRecord;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new JTextField() {

            @Override
            public void paintComponent(Graphics g) {

                if (isEditable()) {
                    setOpaque(false);
                    if (scanItemtListener != null) {
                        g.setColor(StdFun.LIGHT_YELLOW);
                    } else {
                        g.setColor(Color.WHITE);
                    }

                    g.fillRect(0, 0, getWidth(), getHeight());
                    g.setColor(Color.BLACK);
                    g.drawString("*", (getWidth() - 10), 12);
                } else {
                    setOpaque(true);
                    setBackground(StdFun.LIGHT_GREY);
                }
                super.paintComponent(g);
            }
        }
        ;
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextField1.setToolTipText("Required field");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scanTableMouseClicked(evt);
            }
        });

        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scanTableMouseClicked(evt);
            }
        });

        jLabel1.setText("Item Code:");

        jLabel2.setText("Dsc:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        if (jTextField1.isEditable()) {
            itemRecord.setItemCode(jTextField1.getText());

            if (scanItemtListener != null) {
                scanItemtListener.codeFocusLost();
            }

        }
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        if (jTextField2.isEditable()) { 
            itemRecord.setDsc(jTextField2.getText());
        }
    }//GEN-LAST:event_jTextField2FocusLost

    private void scanTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scanTableMouseClicked

        JTextField fld = (JTextField)evt.getSource();

        if (fld.isEditable()) {
            if (evt.getClickCount() ==2 ) {
                if (scanItemtListener != null) {
                    itemRecord.setItemCode(jTextField1.getText());
                    itemRecord.setDsc(jTextField2.getText());
                    scanItemtListener.initScanList();
                }
            }
        }

}//GEN-LAST:event_scanTableMouseClicked
        
    public void fillPanel(){
        jTextField1.setText(itemRecord.getItemCode()) ;
        jTextField2.setText(itemRecord.getDsc()) ;
    }
    
    @Override
    public void fillRecord() {
        itemRecord.setItemCode(jTextField1.getText());
        itemRecord.setDsc(jTextField2.getText());
    }

    @Override
    public void clearForm() {
        jTextField1.setText(null);
        jTextField2.setText(null);
    }
    

    /**
     * Set the components in this <code>JPanel</code> in editable mode to true or false as desired.<br/>
     * This method also makes sure to request the cursor focus onto the first
     * <code>JTextField</code> of this <code>JPanel</code> -
     * which in this case is the item code
     *
     * @param editRec
     */
    @Override
    public void setEditable(boolean editRec) {
        setCodeEditable(editRec);
        jTextField2.setEditable(editRec);

        setColorIfApplicable(scanItemtListener, jTextField1, jTextField2, editRec);
    }

    /**
     * Set the components in this <code>JPanel</code> in editable mode to true or false as desired.<br/>
     * Unlike method <code>public void setEditale(boolean editRec)</code> this method allows the caller
     * to choose if to request the focus on the first <code>JTextField</code> or not. If this parameter
     * is set to true this method behaves exactly as the other method 
     * <code>public void setEditale(boolean editRec)</code>
     * 
     * @param editRec
     * @param getFocus
     */
    public void setEditable(boolean editRec, boolean getFocus) {
        if (getFocus) {
            setEditable(editRec);
        } else {
            jTextField1.setEditable(editRec);
            jTextField2.setEditable(editRec);
        }

        setColorIfApplicable(scanItemtListener, jTextField1, jTextField2, editRec);
    }



    public void setCodeEditable(boolean editRec) {
        jTextField1.setEditable(editRec);
        if (editRec) jTextField1.requestFocusInWindow();     // switches on cursor ready for input
    }

    /**
     * Adds a <code>ScanItemListener</code> to this object.
     *
     * @param scanItemListener
     */
    public void addScanItemListener(ScanItemListener scanItemListener) {
        this.scanItemtListener = scanItemListener;
        setColorIfApplicable(scanItemListener, jTextField1, jTextField2, true);
    }


    public void removeScanItemListener() {
        scanItemtListener = null;
        initColorIfApplicable(scanItemtListener, jTextField1, jTextField2);       
    }

    public ScanItemListener getScanItemListener() {
        return scanItemtListener;
    }

    /**
     * Get Item code in <code>JTextfield</code>
     *
     * @return itemCode
     */
    public String getItemCode() {
        return jTextField1.getText();
    }
    /**
     * Request the focus on the first <code>JTextField</code> of this object
     * 
     * @param mode
     */
    public void requestFocusWindow(int mode) {
        if ((mode == NEW_REC_MODE) | (mode == SCANNING_MODE)) {
            jTextField1.requestFocusInWindow();
        }
        else {
            jTextField2.requestFocusInWindow();
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    private final ItemRecord itemRecord;
    private ScanItemListener scanItemtListener;


    public static final int NEW_REC_MODE = 1;
    public static final int EDIT_MODE = 2;
    public static final int SCANNING_MODE = 1;
   
    /**
     * This interface is needed if this panel is instantiated from a different class 
 rather than the Frame class and is set by calling method addScanItemListener(ScanItemListener scanItemtListener)
 The methods to be implemented must control the calling of the Scanning window class
 and also the filling of fields after the focus from the code field is lost
     */
    public interface ScanItemListener extends InvAppScanListener {        
        public void codeFocusLost();
    }
}
